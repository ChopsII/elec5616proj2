import javax.crypto.*;
import javax.crypto.spec.*;
import java.io.*;
import java.security.*;
import java.util.Arrays;

class StealthNetStorage{

  // randomly generated by perfectly random human ie. just a static salt 'cause its not really important
  static byte[] salt = {
      (byte)0xBE, (byte)0xB2, (byte)0xAC, (byte)0xA2,
      (byte)0x0C, (byte)0xED, (byte)0xE5, (byte)0x3C
  };

  public static SecretKey sk = new SecretKeySpec(salt, "HmacMD5");


  public static void main(String[] args){
    store("bens_file", "mysalt","secretpassword".toCharArray(), "Oh shit, some hidden bytes.".getBytes());
    System.out.println(new String(retrieve("bens_file", "mysalt","secretpassword".toCharArray())));
  }

  public static byte[] makeSalt(String s){
    byte[] salt = new byte[8];
    byte[] s_bytes = s.getBytes();
    for(int i = 0; i < 8; i++){
      if(i >= s_bytes.length){
        salt[i] = (byte)0x00;
      }
      else{
        salt[i] = s_bytes[i];
      }
    }
    return salt;
  }

  public static boolean exists(String filename){
    return (new File(filename)).exists();
  }

  private static byte[] doPBE(int mode, byte[] salt, char[] password, byte[] input){
    PBEKeySpec pbeKeySpec;
    PBEParameterSpec pbeParameterSpec;
    SecretKeyFactory keyFactory;
    SecretKey pbeKey;
    Cipher pbeCipher;

    //arbitrary iteration count
    int iterationCount = 32;

    //spec out the password based encryption
    pbeKeySpec = new PBEKeySpec(password, salt, iterationCount);
    pbeParameterSpec = new PBEParameterSpec(salt, iterationCount);
    byte[] output;
    try{
      //generate the actual key
      keyFactory = SecretKeyFactory.getInstance("PBEWithMD5AndDES");
      pbeKey = keyFactory.generateSecret(pbeKeySpec);

      // create our cipher in encrypt mode
      pbeCipher = Cipher.getInstance("PBEWithMD5AndDES");
      pbeCipher.init(mode, pbeKey, pbeParameterSpec);
      output = pbeCipher.doFinal(input);
    } catch(Exception e){
      e.printStackTrace();
      return null;
    }

    return output;
  }

  private static boolean same(byte[] data, byte[] other){
    return Arrays.equals(data, other);
  }

  private static byte[] doDigest(byte[] data){
    try{
      // Generate secret key for HMAC-MD5
      SecretKey sk = new SecretKeySpec(salt, "HmacMD5");
      Mac mac = Mac.getInstance("HmacMD5");
      byte[] new_digest;
      mac.init(sk);
      new_digest = mac.doFinal(data);
      return new_digest;
    } catch(Exception e){
      e.printStackTrace();
    }
    return null;
  }

  public static boolean store(String filename, String salt, char[] password, byte[] data){
    return store(filename, makeSalt(salt), password, data);
  }

  public static boolean store(String filename, char[] password, byte[] data){
    return store(filename, salt, password, data);
  }

  public static boolean store(String filename, byte[] salt, char[] password, byte[] data){
    if(exists(filename)){
      return false;
    }

    // our now encrypted data
    byte[] encrypted = doPBE(Cipher.ENCRYPT_MODE, salt, password, data);
    byte[] digest = doDigest(encrypted);
    try {
        DataOutputStream out = new DataOutputStream(new FileOutputStream(filename));
        out.writeInt(encrypted.length); //store the length of the data we are outputting
        out.writeInt(digest.length);
        out.write(encrypted, 0, encrypted.length); //write out all our encrypted data
        out.write(digest, 0, digest.length);
        out.close();
    } catch (IOException e) {
      e.printStackTrace();
      return false;
    }
    return true;
  }

  public static byte[] retrieve(String filename, String salt, char[] password){
    return retrieve(filename, makeSalt(salt), password);
  }

  public static byte[] retrieve(String filename, char[] password){
    return retrieve(filename, salt, password);
  }

  public static byte[] retrieve(String filename, byte[] salt, char[] password){
    if(!exists(filename)){ //the file is not there!
      return null;
    }

    byte[] encrypted = null;
    byte[] digest = null;
    try{
      DataInputStream in = new DataInputStream(new FileInputStream(filename));
      int length = in.readInt();
      int digest_length = in.readInt();
      encrypted = new byte[length];
      digest = new byte[digest_length];
      in.read(encrypted);
      in.read(digest);
      in.close();
    } catch (IOException e){ //bad stuff so return nothing
      e.printStackTrace();
      return null;
    }

    //oh no, bad stuff
    if(encrypted == null || digest == null){
      return null;
    }

    if(!same(digest, doDigest(encrypted))){
      System.out.println("Possible Hack Attempt: Stored digest differs from actual");
      return null;
    }

    // return our decrypted cipher text
    byte[] decrypted = doPBE(Cipher.DECRYPT_MODE, salt, password, encrypted);
    return decrypted;
  }

  public static void printByteArray(byte[] arr) {
		for (Byte b : arr) {
			System.out.print(b);
			System.out.print(",");
		}
		System.out.println();
	}

}

