/******************************************************************************
 * ELEC5616
 * Computer and Network Security, The University of Sydney
 * Copyright (C) 2002-2004, Matt Barrie, Stephen Gould and Ryan Junee
 *
 * PROJECT:         StealthNet
 * FILENAME:        StealthNetClient.java
 * AUTHORS:         Matt Barrie, Stephen Gould and Ryan Junee
 * DESCRIPTION:     Implementation of StealthNet Client for ELEC5616
 *                  programming assignment.
 *                  This code has been written for the purposes of teaching
 *                  cryptography and computer security. It is to be used as
 *                  a demonstration only. No attempt has been made to optimise
 *                  the source code.
 * VERSION:         1.0-ICE
 *
 * REVISION HISTORY:
 *
 *****************************************************************************/

/* Import Libraries **********************************************************/

import java.io.*;
import java.lang.reflect.Array;
import java.net.*;

import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.DefaultCaret;

import java.awt.*;
import java.awt.event.*;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Arrays;
import java.util.Hashtable;

/* StealthNetClient Class Definition *****************************************/

public class StealthNetClient {
	private static JFrame clientFrame;
	private static JTextArea msgTextBox;
	private JButton loginBtn;
	private StealthNetComms stealthComms = null;
	private javax.swing.Timer stealthTimer;
	private String userID = null;
	private JTable buddyTable = null, secretTable = null;
	private DefaultTableModel buddyListData = null, secretListData = null;
	JTextField creditsBox;

	private int credits = 100; // CHANGEME: Give them 100 credits for
								// demonstration purposes

	private class SecretData {
		String description = null;
		String filename = null;
	}

	static private Hashtable secretDescriptions = new Hashtable();

	private static KeyPair PKEKeyPair;

	public StealthNetClient() {
		stealthTimer = new javax.swing.Timer(100, new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				processPackets();
			}
		});
	}

	public Component createGUI() {
		JPanel pane = new JPanel();

		// create buddy list
		buddyListData = new DefaultTableModel() {
			public boolean isCellEditable(int row, int col) {
				return false;
			};
		};
		buddyListData.addColumn("User ID");
		buddyListData.addColumn("Online");
		buddyTable = new JTable(buddyListData);
		buddyTable.setPreferredScrollableViewportSize(new Dimension(200, 100));
		buddyTable.getColumnModel().getColumn(0).setPreferredWidth(180);
		JScrollPane buddyScrollPane = new JScrollPane(buddyTable);
		buddyScrollPane.setBorder(BorderFactory.createCompoundBorder(
				BorderFactory.createCompoundBorder(BorderFactory
						.createTitledBorder("User List"), BorderFactory
						.createEmptyBorder(0, 0, 0, 0)), buddyScrollPane
						.getBorder()));

		// add mouse listen for popup windows
		// act on JTable row right-click
		MouseListener ml = new MouseAdapter() {
			JPopupMenu popup;
			int row;
			String myid, mystatus;

			public void mousePressed(MouseEvent e) {
				mouseReleased(e);
			}

			public void mouseReleased(MouseEvent e) {

				if (e.isShiftDown() || e.isControlDown() || e.isAltDown()) {
					return;
				}
				if (e.isPopupTrigger()) {
					JMenuItem item;

					row = buddyTable.rowAtPoint(e.getPoint());

					popup = new JPopupMenu("Action");
					popup.setLabel("Action");

					item = new JMenuItem("Chat");
					item.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) {
							startChat(row);
						}
					});
					popup.add(item);

					item = new JMenuItem("Send File");

					item.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) {
							sendFile(row);
						}
					});
					popup.add(item);
					popup.show(e.getComponent(), e.getX(), e.getY());
				}
			}
		};
		buddyTable.addMouseListener(ml);

		// create secret window
		secretListData = new DefaultTableModel() {
			public boolean isCellEditable(int row, int col) {
				return false;
			};
		};
		secretListData.addColumn("Secret");
		secretListData.addColumn("Cost");

		secretTable = new JTable(secretListData);
		secretTable.setPreferredScrollableViewportSize(new Dimension(200, 100));
		secretTable.getColumnModel().getColumn(0).setPreferredWidth(180);

		ml = new MouseAdapter() {
			JPopupMenu popup;
			int row;
			String cost;

			public void mosuePressed(MouseEvent e) {
				mouseReleased(e);
			}

			public void mouseReleased(MouseEvent e) {

				if (e.isShiftDown() || e.isControlDown() || e.isAltDown()) {
					return;
				}
				if (e.isPopupTrigger()) {
					JMenuItem item;

					row = buddyTable.rowAtPoint(e.getPoint());

					popup = new JPopupMenu("Action");
					popup.setLabel("Action");

					item = new JMenuItem("Details");
					item.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) {
							secretDetails(row);
						}
					});
					popup.add(item);

					item = new JMenuItem("Purchase");
					item.addActionListener(new ActionListener() {
						public void actionPerformed(ActionEvent e) {
							purchaseSecret(row);
						}
					});
					popup.add(item);

					popup.show(e.getComponent(), e.getX(), e.getY());
				}
			}
		};
		secretTable.addMouseListener(ml);

		JScrollPane secretScrollPane = new JScrollPane(secretTable);
		secretScrollPane.setBorder(BorderFactory.createCompoundBorder(
				BorderFactory.createCompoundBorder(BorderFactory
						.createTitledBorder("Secrets List"), BorderFactory
						.createEmptyBorder(0, 0, 0, 0)), secretScrollPane
						.getBorder()));

		// create instant message window
		msgTextBox = new JTextArea("Authentication required.\n");
		msgTextBox.setLineWrap(true);
		msgTextBox.setWrapStyleWord(true);
		msgTextBox.setEditable(false);
		JScrollPane msgScrollPane = new JScrollPane(msgTextBox);
		msgScrollPane
				.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		msgScrollPane.setPreferredSize(new Dimension(200, 100));
		msgScrollPane.setBorder(BorderFactory.createCompoundBorder(
				BorderFactory.createCompoundBorder(BorderFactory
						.createTitledBorder("Console"), BorderFactory
						.createEmptyBorder(0, 0, 0, 0)), msgScrollPane
						.getBorder()));

		// create split pane for buddy list and messages

		final JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
				buddyScrollPane, secretScrollPane);
		splitPane.setOneTouchExpandable(true);
		splitPane.setDividerLocation(150);

		final JSplitPane topPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
				splitPane, msgScrollPane);
		topPane.setOneTouchExpandable(true);

		// Credits display
		JPanel creditsPane = new JPanel();
		creditsPane.setLayout(new GridLayout(1, 0));
		creditsPane.setPreferredSize(new Dimension(180, 30));
		creditsPane.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));
		creditsPane.add(new JLabel("Credits:  ", SwingConstants.RIGHT));
		creditsBox = new JTextField(new Integer(credits).toString());
		creditsBox.setEditable(false);
		creditsPane.add(creditsBox);

		// create buttons (login, send message, chat, ftp)
		loginBtn = new JButton(new ImageIcon("login.gif"));
		loginBtn.setVerticalTextPosition(AbstractButton.BOTTOM);
		loginBtn.setHorizontalTextPosition(AbstractButton.CENTER);
		loginBtn.setMnemonic(KeyEvent.VK_N);
		loginBtn.setToolTipText("Login");
		loginBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (stealthComms == null) {
					login();
				} else {
					logout();
				}
			}
		});

		final JButton msgBtn = new JButton(new ImageIcon("msg.gif"));
		msgBtn.setVerticalTextPosition(AbstractButton.BOTTOM);
		msgBtn.setHorizontalTextPosition(AbstractButton.CENTER);
		msgBtn.setMnemonic(KeyEvent.VK_M);
		msgBtn.setToolTipText("Create Secret");
		msgBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				createSecret();
			}
		});

		JPanel btnPane = new JPanel();
		btnPane.setLayout(new GridLayout(1, 0));
		btnPane.setPreferredSize(new Dimension(180, 40));
		btnPane.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));
		btnPane.add(loginBtn);
		btnPane.add(msgBtn);

		JPanel bottomPane = new JPanel();
		bottomPane.setLayout(new BorderLayout());
		bottomPane.add(creditsPane, BorderLayout.NORTH);
		bottomPane.add(btnPane, BorderLayout.SOUTH);

		// create top-level panel and add components

		pane.setBorder(BorderFactory.createEmptyBorder(10, 10, 5, 10));
		pane.setLayout(new BorderLayout());
		pane.add(topPane, BorderLayout.NORTH);
		pane.add(bottomPane, BorderLayout.SOUTH);

		return pane;
	}

	private synchronized void login() {
		if (stealthComms != null) {
			addMsg("[*ERR*] Already logged in.\n");
			return;
		}

		try {
			userID = JOptionPane.showInputDialog("Login:", userID);
			if (userID == null)
				return;
			stealthComms = new StealthNetComms();
			stealthComms.initiateSession(new Socket(StealthNetComms.SERVERNAME,
					StealthNetComms.SERVERPORT));
			stealthComms.sendPacket(StealthNetPacket.CMD_LOGIN, userID);
			stealthTimer.start();
		} catch (UnknownHostException e) {
			addMsg("[*ERR*] Unknown host: "
					+ StealthNetComms.SERVERNAME + "\n");
		} catch (IOException e) {
			addMsg("[*ERR*] Could not connect to host: "
					+ StealthNetComms.SERVERNAME + "\n");
		}

		addMsg("Connected to stealthnet.\n");
		clientFrame.setTitle("stealthnet [" + userID + "]");
		loginBtn.setIcon(new ImageIcon("logout.gif"));
		loginBtn.setToolTipText("Logout");
	}

	private synchronized void logout() {
		if (stealthComms != null) {
			stealthTimer.stop();
			stealthComms.sendPacket(StealthNetPacket.CMD_LOGOUT);
			stealthComms.terminateSession();
			stealthComms = null;
			loginBtn.setIcon(new ImageIcon("login.gif"));
			loginBtn.setToolTipText("Login");
			buddyListData.setRowCount(0);
			secretListData.setRowCount(0);
			addMsg("Disconnected.\n");
		}
	}

	private void createSecret() {
		String userMsg;
		String name = "", description = "", cost = "", filename = "";

		if (stealthComms == null) {
			addMsg("[*ERR*] Not logged in.\n");
			return;
		}

		name = JOptionPane.showInputDialog("Secret Name:", name);

		description = JOptionPane.showInputDialog("Secret Description:",
				description);

		cost = JOptionPane.showInputDialog("Secret Cost (credits):", cost);

		FileDialog fileOpen = new FileDialog(clientFrame,
				"Select Secret File....", FileDialog.LOAD);
		fileOpen.show();
		if (fileOpen.getFile().length() == 0)
			return;

		userMsg = name + ";" + description + ";" + cost + ";"
				+ fileOpen.getDirectory() + ";" + fileOpen.getFile();
		if (userMsg == null)
			return;
		stealthComms.sendPacket(StealthNetPacket.CMD_CREATESECRET, userMsg);
	}

	private void secretDetails(int row) {
		String name;
		SecretData data;

		name = (String) secretTable.getValueAt(row, 0);
		data = (SecretData) secretDescriptions.get(name);
		if (data != null) {
			JOptionPane.showMessageDialog(null, data.description,
					"Details of Secret: " + name, JOptionPane.PLAIN_MESSAGE);
		}

		return;
	}

	private void purchaseSecret(int row) {
		String name = (String) secretTable.getValueAt(row, 0);
		SecretData data = (SecretData) secretDescriptions.get(name);
		if (data == null)
			return;

		// set up socket on a free port
		ServerSocket ftpSocket = null;
		try {
			ftpSocket = new ServerSocket(0);
		} catch (IOException e) {
			System.err.println("could not set up listening port");
			addMsg("[*ERR*] Transfer failed.\n");
			return;
		}

		// send reqest to server
		String iAddr;
		try {
			iAddr = InetAddress.getLocalHost().toString();
			if (iAddr.lastIndexOf("/") > 0)
				iAddr = iAddr.substring(0, iAddr.lastIndexOf("/"));
		} catch (UnknownHostException e) {
			iAddr = "localhost";
		}
		iAddr += ":" + Integer.toString(ftpSocket.getLocalPort());
		stealthComms.sendPacket(StealthNetPacket.CMD_GETSECRET, name + "@"
				+ iAddr);

		FileDialog fileSave = new FileDialog(clientFrame, "Save As...",
				FileDialog.SAVE);
		fileSave.setFile(data.filename);
		fileSave.show();
		if ((fileSave.getFile() != null) && (fileSave.getFile().length() > 0)) {
			// wait for user to connect, then start file transfer
			try {
				ftpSocket.setSoTimeout(2000); // 2 second timeout
				StealthNetComms snComms = new StealthNetComms();
				snComms.acceptSession(ftpSocket.accept());
				new StealthNetFileTransfer(snComms, fileSave.getDirectory()
						+ fileSave.getFile(), false).start();
			} catch (Exception e) {
				addMsg("[*ERR*] Transfer failed.\n");
			}
		}
	}

	private boolean isOKtoSendtoRow(int row) {
		String myid, mystatus;

		myid = (String) buddyTable.getValueAt(row, 0);
		mystatus = (String) buddyTable.getValueAt(row, 1);

		if (myid.equals(userID)) {
			addMsg("[*ERR*] Can't send to self.\n");
			return false;
		}

		// check if the user is logged in
		if (mystatus.equals("false")) {
			addMsg("[*ERR*] User is not online.\n");
			return false;
		}

		return true;
	}

	private void startChat(int row) {

		if (!isOKtoSendtoRow(row)) {
			return;
		}

		String myid = (String) buddyTable.getValueAt(row, 0);

		// set up socket on a free port
		ServerSocket chatSocket = null;

		try {
			chatSocket = new ServerSocket(0);
		} catch (IOException e) {
			addMsg("[*ERR*] Chat failed.\n");
			return;
		}

		// send message to server with target user and listening address and
		// port
		String iAddr;
		try {
			iAddr = InetAddress.getLocalHost().toString();
			if (iAddr.lastIndexOf("/") > 0)
				iAddr = iAddr.substring(0, iAddr.lastIndexOf("/"));
		} catch (UnknownHostException e) {
			iAddr = "localhost";
		}
		iAddr += ":" + Integer.toString(chatSocket.getLocalPort());
		stealthComms.sendPacket(StealthNetPacket.CMD_CHAT, myid + "@" + iAddr);

		// wait for user to connect and open chat window
		try {
			chatSocket.setSoTimeout(2000); // 2 second timeout
			StealthNetComms snComms = new StealthNetComms();
			snComms.acceptSession(chatSocket.accept());
			new StealthNetChat(userID, snComms).start();
		} catch (Exception e) {
			addMsg("[*ERR*] Chat failed.\n");
		}
	}

	private void sendFile(int row) {

		if (!isOKtoSendtoRow(row)) {
			return;
		}

		String myid = (String) buddyTable.getValueAt(row, 0);

		FileDialog fileOpen = new FileDialog(clientFrame, "Open...",
				FileDialog.LOAD);

		fileOpen.show();
		if (fileOpen.getFile().length() == 0)
			return;

		// set up socket on a free port
		ServerSocket ftpSocket = null;
		try {
			ftpSocket = new ServerSocket(0);
		} catch (IOException e) {
			System.err.println("could not set up listening port");
			addMsg("[*ERR*] FTP failed.\n");
			return;
		}

		// send message to server with target user and listening address and
		// port
		String iAddr;
		try {
			iAddr = InetAddress.getLocalHost().toString();
			if (iAddr.lastIndexOf("/") > 0)
				iAddr = iAddr.substring(0, iAddr.lastIndexOf("/"));
		} catch (UnknownHostException e) {
			iAddr = "localhost";
		}
		iAddr += ":" + Integer.toString(ftpSocket.getLocalPort());
		stealthComms.sendPacket(StealthNetPacket.CMD_FTP, myid + "@" + iAddr
				+ "#" + fileOpen.getFile());

		// wait for user to connect, then start file transfer
		try {
			ftpSocket.setSoTimeout(2000); // 2 second timeout
			StealthNetComms snComms = new StealthNetComms();
			snComms.acceptSession(ftpSocket.accept());
			new StealthNetFileTransfer(snComms, fileOpen.getDirectory()
					+ fileOpen.getFile(), true).start();
		} catch (Exception e) {
			addMsg("[*ERR*] FTP failed.\n");
		}
	}

	private void processPackets() {
		// Update credits box, stick it here for convenience
		creditsBox.setText(new Integer(credits).toString());

		try {
			if ((stealthComms == null) || (!stealthComms.recvReady()))
				return;
		} catch (IOException e) {
			addMsg("[*ERR*] The server appears to be down.\n");
			return;
		}

		StealthNetPacket pckt = new StealthNetPacket();
		StealthNetComms snComms;
		String iAddr, fName;
		Integer iPort;

		stealthTimer.stop();

		try {
			// check for message from server
			while (stealthComms.recvReady()) {
				pckt = stealthComms.recvPacket();
				switch (pckt.command) {
				case StealthNetPacket.CMD_MSG:
					addMsg(new String(pckt.data) + "\n");
					break;

				case StealthNetPacket.CMD_CHAT:
					iAddr = new String(pckt.data);
					iAddr = iAddr.substring(iAddr.lastIndexOf("@") + 1);
					iPort = new Integer(iAddr
							.substring(iAddr.lastIndexOf(":") + 1));
					iAddr = iAddr.substring(0, iAddr.lastIndexOf(":"));
					snComms = new StealthNetComms();
					snComms
							.initiateSession(new Socket(iAddr, iPort.intValue()));
					new StealthNetChat(userID, snComms).start();
					break;

				case StealthNetPacket.CMD_FTP:
					iAddr = new String(pckt.data);
					iAddr = iAddr.substring(iAddr.lastIndexOf("@") + 1);
					fName = iAddr.substring(iAddr.lastIndexOf("#") + 1);
					iAddr = iAddr.substring(0, iAddr.lastIndexOf("#"));
					iPort = new Integer(iAddr
							.substring(iAddr.lastIndexOf(":") + 1));
					iAddr = iAddr.substring(0, iAddr.lastIndexOf(":"));

					snComms = new StealthNetComms();
					snComms
							.initiateSession(new Socket(iAddr, iPort.intValue()));

					FileDialog fileSave = new FileDialog(clientFrame,
							"Save As...", FileDialog.SAVE);
					fileSave.setFile(fName);
					fileSave.show();
					if ((fileSave.getFile() != null)
							&& (fileSave.getFile().length() > 0)) {
						new StealthNetFileTransfer(snComms, fileSave
								.getDirectory()
								+ fileSave.getFile(), false).start();
					}
					break;

				case StealthNetPacket.CMD_LIST:
					int indx;
					String row;
					String userTable = new String(pckt.data);
					buddyListData.setRowCount(0);
					while (userTable.length() > 0) {
						indx = userTable.indexOf("\n");
						if (indx > 0) {
							row = userTable.substring(0, indx);
							userTable = userTable.substring(indx + 1);
						} else {
							row = userTable;
							userTable = "";
						}
						indx = row.lastIndexOf(",");
						if (indx > 0) {
							buddyListData.addRow(new Object[] {
									row.substring(0, indx).trim(),
									row.substring(indx + 1).trim() });
						}
					}

					break;

				case StealthNetPacket.CMD_SECRETLIST:

					String secretTable = new String(pckt.data);
					secretListData.setRowCount(0);
					while (secretTable.length() > 0) {
						indx = secretTable.indexOf("\n");
						if (indx > 0) {
							row = secretTable.substring(0, indx);
							secretTable = secretTable.substring(indx + 1);
						} else {
							row = secretTable;
							secretTable = "";
						}

						String values[] = row.split(";");
						secretListData.addRow(values);

						SecretData data = new SecretData();
						data.description = values[2];
						data.filename = values[3];
						secretDescriptions.put(values[0], data);
					}

					break;

				case StealthNetPacket.CMD_GETSECRET:
					fName = new String(pckt.data);
					iAddr = fName.substring(fName.lastIndexOf("@") + 1);
					iPort = new Integer(iAddr
							.substring(iAddr.lastIndexOf(":") + 1));
					iAddr = iAddr.substring(0, iAddr.lastIndexOf(":"));
					fName = fName.substring(0, fName.lastIndexOf("@"));

					snComms = new StealthNetComms();
					snComms
							.initiateSession(new Socket(iAddr, iPort.intValue()));

					addMsg("[INFO] Sending out a secret.\n");

					new StealthNetFileTransfer(snComms, fName, true).start();

					break;

				default:
					System.out.println("unrecognised command");
				}
			}
		} catch (Exception e) {
			System.err.println("error running client thread");
			e.printStackTrace();
		}

		stealthTimer.start();
	}

	public static void main(String[] args) {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {
		}

		// create the top-level container and contents
		clientFrame = new JFrame("stealthnet");
		StealthNetClient app = new StealthNetClient();
		Component contents = app.createGUI();
		clientFrame.getContentPane().add(contents, BorderLayout.CENTER);

		// finish setting up the gui
		clientFrame.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}
		});
		clientFrame.pack();
		clientFrame.setVisible(true);

		/* TODO Refactor this so it's per user.
		 * this means i need to do it when they're trying to log in.
		 * The user name needs to be appended to the key file names somehow.
		 * Is it ok for the username to be in plain text on their private key file name?
		 * 
		 * Also it obviously needs to take the username as an argument
		 */
		readKeyFiles();

	}

	private static void readKeyFiles() {
		
		addMsg("Checking existence of key files\n");
		
		// Check and see if there is already a keypair on this machine
		File priKF = new File("pri.key");
		File pubKF = new File("pub.key");
		try {
			//Open private key file and decrypt it
			FileInputStream priKFIS = new FileInputStream(priKF);
			FileInputStream pubKFIS = new FileInputStream(pubKF);
			addMsg("Key files found\n");
			addMsg("Opening private key file for decryption\n");
			byte[] encryptedPriK = new byte[(int) priKF.length()];
			priKFIS.read(encryptedPriK);
			priKFIS.close();
			PrivateKey priK = decryptPriKeyBytes(encryptedPriK);

			//open public key file & read
			addMsg("Reading public key file\n");
			byte[] pubKBytes = new byte[(int)pubKF.length()];
			pubKFIS.read(pubKBytes);
			pubKFIS.close();
			PublicKey pubK = KeyFactory.getInstance("RSA").generatePublic(new X509EncodedKeySpec(pubKBytes));
			
						
			//create a KeyPair based on the two keys
			PKEKeyPair = new KeyPair(pubK, priK);
			

		} catch (FileNotFoundException e) {
			// file does not exist
			addMsg("Key file not found\n");

			// generate keypair,
			addMsg("Generating new keys\n");
			PKEKeyPair = generateNewKeyPair();

			byte[] keyBytes = Helpers.concatByteArray(PKEKeyPair.getPublic()
					.getEncoded(), PKEKeyPair.getPrivate().getEncoded());

			String pword = "";
			pword = JOptionPane.showInputDialog("Please enter a password:");

			// generate key from password
			addMsg("Generating key from password\n");
			SecretKey keyFileKey = Helpers.generateKey(pword.getBytes());

			// generate MAC
			addMsg("Generating HMAC\n");
			byte[] hmac = Helpers.generateHMAC(keyFileKey, keyBytes);

			byte[] toWrite = Helpers.concatByteArray(keyBytes, hmac);

			// encrypt PKEKeyPair & MAC
			addMsg("Encrypting keyfile\n");
			toWrite = Helpers.encrypt(keyFileKey, toWrite);

			try {
				

				// Write encrypted PKEKeyPair & MAC to disk
				addMsg("Writing to disk\n");
				FileOutputStream prikFOS = new FileOutputStream(priKF);
				prikFOS.write(toWrite);
				prikFOS.close();

				addMsg("Done\n");
				
				
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				System.exit(1);
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				System.exit(1);
			}
			

		} catch (IOException e) {
			System.err.println("Key pair file reading failed:");
			e.printStackTrace();
			System.exit(1);
		} catch (InvalidKeySpecException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.exit(1);
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.exit(1);
		}

	}

	/**
	 * Function to generate the RSA keypair. 2048 bit is used, as 1024 is broken
	 * 
	 * @return the KeyPair
	 */
	private static KeyPair generateNewKeyPair() {
		KeyPairGenerator keyPairGenerator;
		try {
			keyPairGenerator = KeyPairGenerator.getInstance("RSA");
			keyPairGenerator.initialize(2048);
			return keyPairGenerator.genKeyPair();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			System.exit(1);
		}
		return null;
	}

	private static PrivateKey decryptPriKeyBytes (byte[] encryptedKeyPair) {
		//TODO make sure they have userID set, if they do, use that.
		
		//ask for password
		String pword;
		pword = JOptionPane.showInputDialog("Please enter the password:");
		
		//recreate the key from the password
		SecretKey key = Helpers.generateKey(pword.getBytes());
		
		//Decrypt the private key bytes
		byte[] decryptedBytes = Helpers.decrypt(key, encryptedKeyPair);
		
		//check the HMAC
		byte[] incomingHMAC = new byte[16];
		System.arraycopy(decryptedBytes, decryptedBytes.length-16, incomingHMAC, 0, 16);
		byte[] incomingPriK = new byte[decryptedBytes.length-16];
		System.arraycopy(decryptedBytes, 0, incomingPriK, 0, incomingPriK.length);
		if (Helpers.CheckHMAC(incomingHMAC, key, incomingPriK));
		// TODO split the key pair into the two parts
		// TODO recode the two parts back into the two  keys
		// TODO return the KeyPair
		return null;
	}
	
	/**
	 * Little function to add message to the message box and then move the caret,
	 * as I was not able to make it scroll automatically.
	 * @param msg
	 */
	private static void addMsg(String msg){
		msgTextBox.append(msg);
		msgTextBox.setCaretPosition(msgTextBox.getDocument().getLength());
	}
}

/******************************************************************************
 * END OF FILE: StealthNetClient.java
 *****************************************************************************/
