/******************************************************************************
 * ELEC5616/NETS3016
 * Computer and Network Security, The University of Sydney
 * Copyright (C) 2002-2004, Matt Barrie and Stephen Gould
 *
 * PROJECT:         StealthNet
 * FILENAME:        StealthNetServer.java
 * AUTHORS:         Matt Barrie and Stephen Gould
 * DESCRIPTION:     Implementation of StealthNet Server for ELEC5616/NETS3016
 *                  programming assignment.
 *                  This code has been written for the purposes of teaching
 *                  cryptography and computer security. It is to be used as
 *                  a demonstration only. No attempt has been made to optimise
 *                  the source code.
 * VERSION:         1.0-ICE
 *
 * REVISION HISTORY:
 *
 *****************************************************************************/

/* Import Libraries **********************************************************/

import java.io.*;
import java.net.*;
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Hashtable;
import javax.crypto.*;
import javax.crypto.spec.*;
import javax.crypto.interfaces.*;
import java.security.*;
import java.security.spec.*;
import java.util.Arrays;
import java.util.*;
import java.nio.*;

/* StealthNetServer Class Definition *****************************************/

public class jbStealthNetServer {
	public static String PASSWORD = "secretpassword";

	/*
	 * Publically available key for the server.
	 */
	public static PublicKey getPublicKey() {
		try {
			byte[] encodedServerKey = StealthNetStorage.retrieve(
					"server_public", "".toCharArray());
			X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(
					encodedServerKey);
			KeyFactory kf = KeyFactory.getInstance("RSA");
			PublicKey serverPublicKey = kf.generatePublic(publicKeySpec);
			return serverPublicKey;
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	public static PublicKey getDSAPublicKey() {
		try {
			byte[] encodedServerKey = StealthNetStorage.retrieve(
					"server_dsa_public", "".toCharArray());
			X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(
					encodedServerKey);
			KeyFactory kf = KeyFactory.getInstance("DSA");
			PublicKey serverPublicKey = kf.generatePublic(publicKeySpec);
			return serverPublicKey;
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	public static void main(String[] args) throws IOException {
		PrivateKey privateKey = null;
		PublicKey publicKey = null;
		PrivateKey dsaPrivateKey = null;
		PublicKey dsaPublicKey = null;
		ServerSocket svrSocket = null;

		try {
			KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
			KeyPairGenerator dsaKeyPairGenerator = KeyPairGenerator
					.getInstance("DSA");
			SecureRandom random = SecureRandom.getInstance("SHA1PRNG", "SUN");
			random.setSeed("".getBytes());
			AlgorithmParameterGenerator dsaParamGenerator = AlgorithmParameterGenerator
					.getInstance("DSA");
			dsaParamGenerator.init(1024, random);
			AlgorithmParameters dsaParams = dsaParamGenerator
					.generateParameters();
			DSAParameterSpec dsaParamSpec = (DSAParameterSpec) dsaParams
					.getParameterSpec(DSAParameterSpec.class);

			keyGen.initialize(1024, random);
			dsaKeyPairGenerator.initialize(dsaParamSpec, random);

			KeyPair dsaKeyPair = dsaKeyPairGenerator.genKeyPair();
			KeyPair pair = keyGen.generateKeyPair();
			privateKey = pair.getPrivate();
			dsaPrivateKey = dsaKeyPair.getPrivate();
			publicKey = pair.getPublic();
			dsaPublicKey = dsaKeyPair.getPublic();

			byte[] encodedKey = publicKey.getEncoded();
			StealthNetStorage.store("server_public", "".toCharArray(),
					encodedKey);

			encodedKey = dsaPublicKey.getEncoded();
			StealthNetStorage.store("server_dsa_public", "".toCharArray(),
					encodedKey);

			svrSocket = new ServerSocket(jbStealthNetComms.SERVERPORT);
		} catch (IOException e) {
			System.err.println("Could not listen on port: "
					+ jbStealthNetComms.SERVERPORT);
			System.exit(1);
		} catch (Exception e) {
			e.printStackTrace();
		}

		System.out.println("Server online...");
		while (true) {
			new jbStealthNetServerThread(svrSocket.accept(), privateKey,
					dsaPrivateKey).start();
			System.out.println("Server accepted connection...");
		}
	}
}

/******************************************************************************
 * END OF FILE: StealthNetServer.java
 *****************************************************************************/

